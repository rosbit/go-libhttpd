/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package libhttpd */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "main.go"

#include "httpd_cb.h"
#include <string.h>
#include <stdio.h>
static fn_client_accepted client_accepted = NULL;

static void set_httpd_cb(void* cb) {
	client_accepted = (fn_client_accepted)cb;
}

static void request_coming(int client_id) {
	client_accepted(client_id);
}

static void iter_env(void* iter_cb, void* udd, char* key, int keyLen, char* val, int valLen) {
	fn_iter_env iter_env_cb = (fn_iter_env)iter_cb;
	iter_env_cb(udd, key, keyLen, val, valLen);
}

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern int StartHttpd(char* host, int port, void* httpd_cb, int showLog);
extern void StopHttpd();
extern int GetReqEnv(int clientId, char* name, char** val, int* valLen);
extern int GetJSONVal(int clientId, char* name, char** val, int* valLen);
extern int GetFormVal(int clientId, char* name, char** val, int* valLen);
extern void IterReqEnvs(int clientId, void* iter_cb, void* udd);
extern int ReadBody(int clientId, char** body, int* bodyLen);
extern int ReadJSON(int clientId);
extern int SetStatus(int clientId, int code);
extern int SetRespHeader(int clientId, char* name, char* val);
extern int AddRespHeader(int clientId, char* name, char* val);
extern int OutputChunk(int clientId, char* chunk, int length);
extern int OutputJSONError(int clientId, int code, char* msg);
extern void HttpdLoop();

#ifdef __cplusplus
}
#endif
